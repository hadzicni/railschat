<div class="container">
  <div class="row">
    <div class="col-12">
      <!-- Room Header -->
      <div class="card mb-3">
        <div class="card-body">
          <div class="d-flex justify-content-between align-items-center">
            <div>
              <h3 class="mb-1">
                <i class="bi bi-chat-square-text me-2"></i>
                <%= @room.name %>
              </h3>
              <p class="text-muted mb-0">
                <i class="bi bi-people me-1"></i>
                <%= @room.messages.select(:user_id).distinct.count %> <%= t('rooms.participants') %>
              </p>
            </div>
            <div>
              <%= link_to rooms_path, class: "btn btn-outline-secondary" do %>
                <i class="bi bi-arrow-left me-1"></i>
                <%= t('admin.back') %>
              <% end %>
            </div>
          </div>

          <% if @room.description.present? %>
            <div class="mt-3 p-2 bg-light rounded small">
              <%= @room.description %>
            </div>
          <% end %>
        </div>
      </div>
    </div>
  </div>

  <div class="row">
    <!-- Chat Area -->
    <div class="col-lg-8">
      <div class="card" style="height: 60vh; min-height: 400px;">
        <div class="card-header">
          <h6 class="mb-0">
            <i class="bi bi-chat-dots me-2"></i>
            Chat
          </h5>
        </div>

        <div class="card-body p-0 d-flex flex-column" style="height: calc(100% - 60px);">
          <!-- Messages Container -->
          <div class="flex-grow-1 chat-container p-2 overflow-auto" id="messages-container" style="height: calc(100% - 80px); background-color: #f7f7f7;">
            <% if @messages.any? %>
              <% @messages.each do |message| %>
                <%= render 'messages/message', message: message, current_user_id: current_user.id %>
              <% end %>
            <% else %>
              <div class="text-center text-muted py-5" id="no-messages">
                <i class="bi bi-chat-square-dots fs-1 mb-3 d-block"></i>
                <h5><%= t('chat.no_messages_room') %></h5>
                <p><%= t('chat.start_conversation') %></p>
              </div>
            <% end %>
          </div>

          <!-- Message Input -->
          <div class="border-top p-3" style="min-height: 80px;">
            <!-- Reply Preview -->
            <div id="reply-preview" class="reply-preview-container mb-2" style="display: none;">
              <div class="d-flex align-items-center justify-content-between p-2 bg-light rounded-2 border-start border-primary border-3">
                <div class="flex-grow-1">
                  <div class="d-flex align-items-center gap-2 mb-1">
                    <i class="bi bi-reply text-primary"></i>
                    <small class="text-muted"><%= t('chat.reply_to') %> <span id="reply-user-name"></span></small>
                  </div>
                  <div class="reply-content text-muted small" id="reply-content-preview"></div>
                </div>
                <button type="button" class="btn btn-sm btn-outline-secondary" id="cancel-reply">
                  <i class="bi bi-x"></i>
                </button>
              </div>
            </div>

            <%= form_with model: [@room, @message],
                local: false,
                id: "message-form",
                class: "d-flex gap-2" do |form| %>
              <%= form.hidden_field :reply_to_id, id: "reply-to-id" %>
              <div class="flex-grow-1">
                <%= form.text_area :content,
                    placeholder: t('chat.enter_message'),
                    class: "form-control border-0",
                    rows: 1,
                    id: "message-input",
                    required: true,
                    style: "resize: none; box-shadow: none; max-height: 60px;" %>
              </div>
              <div class="align-self-end">
                <button type="submit" class="btn btn-primary px-4 py-2 d-flex align-items-center gap-2 modern-send-btn" id="send-button">
                  <i class="bi bi-send-fill"></i>
                  <span><%= t('chat.send_message') %></span>
                </button>
              </div>
            <% end %>

            <div id="message-errors" class="alert alert-danger mt-2 mb-0" style="display: none;"></div>
          </div>
        </div>
      </div>
    </div>

    <!-- Sidebar -->
    <div class="col-lg-4">
      <!-- Online Users -->
      <div class="card mb-4">
        <div class="card-header">
          <h6 class="mb-0">
            <i class="bi bi-people me-2"></i>
            Aktive Teilnehmer
          </h6>
        </div>
        <div class="card-body">
          <% active_users = @room.messages.includes(:user).select(:user_id).distinct.map(&:user).uniq %>
          <% if active_users.any? %>
            <% active_users.each do |user| %>
              <div class="d-flex align-items-center mb-3">
                <div class="profile-avatar me-3" style="width: 40px; height: 40px; font-size: 1.2rem;">
                  <%= user.initials %>
                </div>
                <div class="flex-grow-1">
                  <%= link_to user_path(user), class: "text-decoration-none" do %>
                    <div class="fw-bold">
                      <%= user.display_name %>
                    </div>
                  <% end %>
                  <small class="text-muted">
                    <%= pluralize(user.messages.where(room: @room).count, 'Nachricht') %>
                  </small>
                </div>
              </div>
            <% end %>
          <% else %>
            <div class="text-center text-muted py-3">
              <i class="bi bi-person-plus fs-4 mb-2 d-block"></i>
              <small>Noch keine aktiven Teilnehmer</small>
            </div>
          <% end %>
        </div>
      </div>

      <!-- Room Info -->
      <div class="card">
        <div class="card-header">
          <h6 class="mb-0">
            <i class="bi bi-info-circle me-2"></i>
            Raum-Informationen
          </h6>
        </div>
        <div class="card-body">
          <div class="row text-center">
            <div class="col-6 border-end">
              <div class="bg-primary bg-opacity-10 rounded p-2 mb-2">
                <i class="bi bi-chat-text text-primary fs-5"></i>
              </div>
              <h6 class="mb-0"><%= @room.messages.count %></h6>
              <small class="text-muted">Nachrichten</small>
            </div>
            <div class="col-6">
              <div class="bg-success bg-opacity-10 rounded p-2 mb-2">
                <i class="bi bi-people text-success fs-5"></i>
              </div>
              <h6 class="mb-0"><%= active_users.count %></h6>
              <small class="text-muted">Teilnehmer</small>
            </div>
          </div>

          <hr>

          <div class="text-center">
            <small class="text-muted">
              <i class="bi bi-calendar3 me-1"></i>
              Erstellt am <%= @room.created_at.strftime("%d.%m.%Y") %>
            </small>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  /* Chat Container Background */
  .chat-container {
    background: linear-gradient(to bottom, #f7f7f7, #e8e8e8) !important;
  }

  /* WhatsApp-Style Message Bubbles */
  .message-wrapper {
    padding: 4px 15px 8px 15px;
    clear: both;
  }

  .message-bubble {
    padding: 10px 14px;
    border-radius: 18px;
    word-wrap: break-word;
    position: relative;
    margin-bottom: 2px;
    max-width: 85%;
    display: inline-block;
    box-shadow: 0 1px 2px rgba(0,0,0,0.1);
  }

  .own-bubble {
    background: linear-gradient(135deg, #25D366, #20b358);
    color: white;
    border-bottom-right-radius: 4px;
    float: right;
    clear: both;
  }

  .other-bubble {
    background: white;
    color: #333;
    border-bottom-left-radius: 4px;
    float: left;
    clear: both;
    border: 1px solid #e0e0e0;
  }

  .message-bubble-container {
    width: 100%;
    display: block;
    overflow: hidden;
  }

  .message-bubble-container.justify-content-end {
    text-align: right;
  }

  .message-bubble-container.justify-content-start {
    text-align: left;
  }

  .message-content {
    font-size: 14px;
    line-height: 1.4;
    margin-bottom: 4px;
  }

  .message-content p {
    margin: 0;
  }

  .message-footer {
    font-size: 11px;
    margin-top: 4px;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .timestamp {
    opacity: 0.7;
    font-size: 11px;
  }

  .username {
    font-size: 12px;
    color: #25D366;
    font-weight: 600;
    margin-bottom: 2px;
    display: block;
  }

  .reply-btn {
    border: none !important;
    background: none !important;
    padding: 2px 4px !important;
    opacity: 0.6;
    transition: opacity 0.2s;
    font-size: 11px;
  }

  .reply-btn:hover {
    opacity: 1 !important;
    background: rgba(0,0,0,0.1) !important;
    border-radius: 50% !important;
  }

  .own-bubble .reply-btn:hover {
    background: rgba(255,255,255,0.2) !important;
  }

  .own-bubble .reply-btn i {
    color: rgba(255,255,255,0.8);
  }

  .other-bubble .reply-btn i {
    color: rgba(0,0,0,0.5);
  }

  /* Profile avatars for WhatsApp style */
  .profile-avatar {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    flex-shrink: 0;
    width: 32px;
    height: 32px;
    font-size: 12px;
    margin-top: 2px;
  }

  .own-message .profile-avatar {
    float: right;
    margin-left: 8px;
    margin-right: 0;
  }

  .other-message .profile-avatar {
    float: left;
    margin-right: 8px;
    margin-left: 0;
  }

  /* Reply preview styling */
  .reply-indicator {
    margin: 0 15px 6px 15px;
    text-align: left;
  }

  .own-message .reply-indicator {
    text-align: right;
  }

  .reply-preview {
    background: rgba(37, 211, 102, 0.1) !important;
    border-left: 3px solid #25D366 !important;
    display: inline-block;
    max-width: 70%;
  }

  /* Modern Send Button */
  .modern-send-btn {
    background: linear-gradient(45deg, #0d6efd, #6610f2) !important;
    border: none !important;
    border-radius: 12px !important;
    transition: all 0.3s ease !important;
    box-shadow: 0 4px 15px rgba(13, 110, 253, 0.3) !important;
    font-weight: 500 !important;
    position: relative !important;
    overflow: hidden !important;
  }

  .modern-send-btn:hover {
    transform: translateY(-2px) !important;
    box-shadow: 0 6px 20px rgba(13, 110, 253, 0.4) !important;
    background: linear-gradient(45deg, #0b5ed7, #520dc2) !important;
  }

  .modern-send-btn:active {
    transform: translateY(0) !important;
    box-shadow: 0 2px 10px rgba(13, 110, 253, 0.3) !important;
  }

  .modern-send-btn::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
    transition: left 0.5s;
  }

  .modern-send-btn:hover::before {
    left: 100%;
  }

  .modern-send-btn i {
    font-size: 1.1em;
    transition: transform 0.3s ease;
  }

  .modern-send-btn:hover i {
    transform: translateX(2px);
  }

  .modern-send-btn:disabled {
    background: #6c757d !important;
    transform: none !important;
    box-shadow: none !important;
  }

  .modern-send-btn:disabled::before {
    display: none;
  }
</style>

<script type="module">
  import { createConsumer } from "@rails/actioncable";

  document.addEventListener('DOMContentLoaded', function() {
    const roomId = <%= @room.id %>;
    const currentUserId = <%= current_user.id %>;
    // Make currentUserId globally available
    window.currentUserId = currentUserId;
    let consumer, subscription;
    let replyToId = null;

    console.log('🔧 Initializing WebSocket for room:', roomId);

    // Initialize WebSocket connection
    function initializeWebSocket() {
      try {
        consumer = createConsumer();

        subscription = consumer.subscriptions.create(
          { channel: "ChatChannel", room_id: roomId },
          {
            connected: function() {
              console.log("✅ Connected to ChatChannel for room " + roomId);
              updateConnectionStatus(true);
            },

            disconnected: function() {
              console.log("❌ Disconnected from ChatChannel");
              updateConnectionStatus(false);
            },

            received: function(data) {
              console.log("📨 Received message:", data);
              addMessageToChat(data);
            }
          }
        );
      } catch (error) {
        console.error("❌ WebSocket initialization failed:", error);
        updateConnectionStatus(false);
      }
    }

    // Update connection status indicator
    function updateConnectionStatus(connected) {
      const indicator = document.getElementById('connection-status');
      if (indicator) {
        if (connected) {
          indicator.className = 'badge bg-success ms-2';
          indicator.title = 'WebSocket verbunden';
          indicator.textContent = '●';
        } else {
          indicator.className = 'badge bg-warning ms-2';
          indicator.title = 'WebSocket getrennt';
          indicator.textContent = '●';
        }
      }
    }

    // Add new message to chat
    function addMessageToChat(data) {
      const container = document.getElementById('messages-container');
      const noMessages = document.getElementById('no-messages');

      if (noMessages) {
        noMessages.style.display = 'none';
      }

      if (container) {
        // Create a temporary div to parse the HTML
        const tempDiv = document.createElement('div');
        tempDiv.innerHTML = data.message;

        // Get the message wrapper
        const messageWrapper = tempDiv.querySelector('.message-wrapper');

        // Check if this message is from the current user
        console.log('🔍 Checking message ownership: data.user_id =', data.user_id, 'currentUserId =', currentUserId);

        if (data.user_id && data.user_id === currentUserId) {
          console.log('✅ This is my message - styling as own message');
          if (messageWrapper && !messageWrapper.classList.contains('own-message')) {
            messageWrapper.classList.add('own-message');
            messageWrapper.classList.remove('other-message');
          }

          // Update bubble classes
          const bubble = tempDiv.querySelector('.message-bubble');
          if (bubble) {
            bubble.classList.remove('other-bubble');
            bubble.classList.add('own-bubble');
          }

          // Update button container positioning
          const bubbleContainer = tempDiv.querySelector('.message-bubble-container');
          if (bubbleContainer) {
            bubbleContainer.classList.remove('justify-content-start');
            bubbleContainer.classList.add('justify-content-end');
          }

          // Hide username for own messages
          const messageHeader = tempDiv.querySelector('.message-header');
          if (messageHeader) {
            messageHeader.style.display = 'none';
          }

          // Move avatar to the right side and update styling
          const avatar = tempDiv.querySelector('.profile-avatar');
          if (avatar) {
            avatar.classList.remove('me-2');
            avatar.classList.add('ms-2');
            // Move avatar after the message bubble
            const messageBubble = tempDiv.querySelector('.message-bubble');
            if (messageBubble && messageBubble.parentNode) {
              messageBubble.parentNode.appendChild(avatar);
            }
          }

          // Update reply button styling
          const replyBtn = tempDiv.querySelector('.reply-btn');
          if (replyBtn) {
            const icon = replyBtn.querySelector('i');
            if (icon) {
              icon.style.color = 'rgba(255,255,255,0.7)';
              icon.classList.remove('text-muted');
            }
          }

          // Update timestamp styling
          const timestamp = tempDiv.querySelector('.timestamp');
          if (timestamp) {
            timestamp.classList.remove('text-muted');
            timestamp.classList.add('text-light');
          }

          // Update message footer layout
          const messageFooter = tempDiv.querySelector('.message-footer');
          if (messageFooter) {
            messageFooter.classList.remove('justify-content-end');
            messageFooter.classList.add('justify-content-between');
          }
        } else {
          console.log('👥 This is someone else\'s message - styling as other message');
          // Ensure it's marked as other message
          if (messageWrapper && !messageWrapper.classList.contains('other-message')) {
            messageWrapper.classList.add('other-message');
            messageWrapper.classList.remove('own-message');
          }

          // Update bubble classes
          const bubble = tempDiv.querySelector('.message-bubble');
          if (bubble) {
            bubble.classList.remove('own-bubble');
            bubble.classList.add('other-bubble');
          }

          // Update button container positioning
          const bubbleContainer = tempDiv.querySelector('.message-bubble-container');
          if (bubbleContainer) {
            bubbleContainer.classList.remove('justify-content-end');
            bubbleContainer.classList.add('justify-content-start');
          }

          // Ensure username is visible for other messages
          const messageHeader = tempDiv.querySelector('.message-header');
          if (messageHeader) {
            messageHeader.style.display = 'block';
          }

          // Ensure avatar is on the left side
          const avatar = tempDiv.querySelector('.profile-avatar');
          if (avatar) {
            avatar.classList.remove('ms-2');
            avatar.classList.add('me-2');
          }

          // Update reply button styling for other messages
          const replyBtn = tempDiv.querySelector('.reply-btn');
          if (replyBtn) {
            const icon = replyBtn.querySelector('i');
            if (icon) {
              icon.style.color = '';
              icon.classList.add('text-muted');
            }
          }

          // Update timestamp styling for other messages
          const timestamp = tempDiv.querySelector('.timestamp');
          if (timestamp) {
            timestamp.classList.remove('text-light');
            timestamp.classList.add('text-muted');
          }

          // Update message footer layout for other messages
          const messageFooter = tempDiv.querySelector('.message-footer');
          if (messageFooter) {
            messageFooter.classList.remove('justify-content-between');
            messageFooter.classList.add('justify-content-end');
          }
        }

        container.insertAdjacentHTML('beforeend', tempDiv.innerHTML);

        // Attach event listeners to new reply buttons
        attachReplyEventListeners();

        // Auto-scroll to bottom
        setTimeout(function() {
          container.scrollTop = container.scrollHeight;
        }, 50);
      }
    }

    // Show reply preview
    function showReplyPreview(messageId, userName, content) {
      replyToId = messageId;
      const replyPreview = document.getElementById('reply-preview');
      const replyUserName = document.getElementById('reply-user-name');
      const replyContentPreview = document.getElementById('reply-content-preview');
      const replyToIdField = document.getElementById('reply-to-id');
      const messageInput = document.getElementById('message-input');

      if (replyPreview && replyUserName && replyContentPreview && replyToIdField) {
        replyUserName.textContent = userName;
        replyContentPreview.textContent = content.length > 100 ? content.substring(0, 100) + '...' : content;
        replyToIdField.value = messageId;
        replyPreview.style.display = 'block';

        // Focus message input
        if (messageInput) {
          messageInput.focus();
        }
      }
    }

    // Hide reply preview
    function hideReplyPreview() {
      replyToId = null;
      const replyPreview = document.getElementById('reply-preview');
      const replyToIdField = document.getElementById('reply-to-id');

      if (replyPreview) {
        replyPreview.style.display = 'none';
      }
      if (replyToIdField) {
        replyToIdField.value = '';
      }
    }

    // Attach event listeners to reply buttons
    function attachReplyEventListeners() {
      const replyButtons = document.querySelectorAll('.reply-btn');
      replyButtons.forEach(button => {
        if (!button.hasAttribute('data-listener-attached')) {
          button.addEventListener('click', function() {
            const messageId = this.getAttribute('data-message-id');
            const userName = this.getAttribute('data-user-name');
            const content = this.getAttribute('data-content');
            showReplyPreview(messageId, userName, content);
          });
          button.setAttribute('data-listener-attached', 'true');
        }
      });
    }

    // Cancel reply
    const cancelReplyBtn = document.getElementById('cancel-reply');
    if (cancelReplyBtn) {
      cancelReplyBtn.addEventListener('click', hideReplyPreview);
    }

    // Override form submission to use WebSocket
    const messageForm = document.getElementById('message-form');
    if (messageForm) {
      messageForm.addEventListener('submit', function(e) {
        e.preventDefault();

        const messageInput = document.getElementById('message-input');
        const content = messageInput.value.trim();

        if (!content) {
          alert('Bitte gib eine Nachricht ein.');
          return;
        }

        if (subscription && typeof subscription.perform === 'function') {
          // Prepare message data
          const messageData = { content: content };
          if (replyToId) {
            messageData.reply_to_id = replyToId;
          }

          // Send via WebSocket
          console.log('🚀 Sending via WebSocket:', messageData);
          subscription.perform('send_message', messageData);
          messageInput.value = '';

          // Hide reply preview after sending
          hideReplyPreview();
        } else {
          // Fallback: submit form normally
          console.log('⚠️ No WebSocket connection, submitting form normally');
          e.target.submit();
        }
      });
    }

    // Handle Enter key
    const messageInput = document.getElementById('message-input');
    if (messageInput) {
      messageInput.addEventListener('keydown', function(e) {
        if (e.key === 'Enter' && !e.shiftKey) {
          e.preventDefault();
          messageForm.dispatchEvent(new Event('submit'));
        }
      });
    }

    // Auto-scroll to bottom on page load
    const container = document.getElementById('messages-container');
    if (container) {
      container.scrollTop = container.scrollHeight;
    }

    // Attach event listeners to existing reply buttons
    attachReplyEventListeners();

    // Initialize WebSocket
    initializeWebSocket();
  });
</script>
