<div class="container-fluid">
  <div class="row">
    <div class="col-12">
      <!-- Room Header -->
      <div class="card mb-4">
        <div class="card-body">
          <div class="d-flex justify-content-between align-items-center">
            <div class="d-flex align-items-center">
              <div class="bg-primary bg-opacity-10 rounded p-3 me-3">
                <i class="bi bi-chat-square-text text-primary fs-3"></i>
              </div>
              <div>
                <h2 class="mb-1"><%= @room.name %></h2>
                <div class="d-flex align-items-center gap-3">
                  <span class="text-muted">
                    <i class="bi bi-people me-1"></i>
                    <%= pluralize(@room.messages.select(:user_id).distinct.count, 'Teilnehmer') %>
                  </span>
                  <span class="badge bg-success connection-indicator" id="connection-status" title="WebSocket getrennt">
                    <i class="bi bi-wifi me-1"></i>
                    Verbunden
                  </span>
                </div>
              </div>
            </div>
            <div>
              <%= link_to rooms_path, class: "btn btn-outline-primary" do %>
                <i class="bi bi-arrow-left me-2"></i>
                Zur√ºck zu Chatr√§umen
              <% end %>
            </div>
          </div>

          <% if @room.description.present? %>
            <div class="mt-3 p-3 bg-light rounded">
              <i class="bi bi-info-circle me-2"></i>
              <%= @room.description %>
            </div>
          <% end %>
        </div>
      </div>
    </div>
  </div>

  <div class="row">
    <!-- Chat Area -->
    <div class="col-lg-8">
      <div class="card" style="height: 70vh; min-height: 500px;">
        <div class="card-header">
          <h5 class="mb-0">
            <i class="bi bi-chat-dots me-2"></i>
            Chat
          </h5>
        </div>

        <div class="card-body p-0 d-flex flex-column" style="height: calc(100% - 60px);">
          <!-- Messages Container -->
          <div class="flex-grow-1 chat-container p-3 overflow-auto" id="messages-container" style="height: calc(100% - 80px);">
            <% if @messages.any? %>
              <% @messages.each do |message| %>
                <%= render 'messages/message', message: message %>
              <% end %>
            <% else %>
              <div class="text-center text-muted py-5" id="no-messages">
                <i class="bi bi-chat-square-dots fs-1 mb-3 d-block"></i>
                <h5>Noch keine Nachrichten in diesem Chatraum</h5>
                <p>Sei der Erste und starte die Unterhaltung!</p>
              </div>
            <% end %>
          </div>

          <!-- Message Input -->
          <div class="border-top p-3" style="min-height: 80px;">
            <%= form_with model: [@room, @message],
                local: false,
                id: "message-form",
                class: "d-flex gap-2" do |form| %>
              <div class="flex-grow-1">
                <%= form.text_area :content,
                    placeholder: "Schreibe eine Nachricht...",
                    class: "form-control border-0",
                    rows: 1,
                    id: "message-input",
                    required: true,
                    style: "resize: none; box-shadow: none; max-height: 60px;" %>
              </div>
              <div class="align-self-end">
                <%= form.submit class: "btn btn-primary px-3 py-2", id: "send-button" do %>
                  <i class="bi bi-send-fill"></i>
                <% end %>
              </div>
            <% end %>

            <div id="message-errors" class="alert alert-danger mt-2 mb-0" style="display: none;"></div>
          </div>
        </div>
      </div>
    </div>

    <!-- Sidebar -->
    <div class="col-lg-4">
      <!-- Online Users -->
      <div class="card mb-4">
        <div class="card-header">
          <h6 class="mb-0">
            <i class="bi bi-people me-2"></i>
            Aktive Teilnehmer
          </h6>
        </div>
        <div class="card-body">
          <% active_users = @room.messages.includes(:user).select(:user_id).distinct.map(&:user).uniq %>
          <% if active_users.any? %>
            <% active_users.each do |user| %>
              <div class="d-flex align-items-center mb-3">
                <div class="profile-avatar me-3" style="width: 40px; height: 40px; font-size: 1.2rem;">
                  <%= user.initials %>
                </div>
                <div class="flex-grow-1">
                  <%= link_to user_path(user), class: "text-decoration-none" do %>
                    <div class="fw-bold">
                      <%= user.display_name %>
                    </div>
                  <% end %>
                  <small class="text-muted">
                    <%= pluralize(user.messages.where(room: @room).count, 'Nachricht') %>
                  </small>
                </div>
              </div>
            <% end %>
          <% else %>
            <div class="text-center text-muted py-3">
              <i class="bi bi-person-plus fs-4 mb-2 d-block"></i>
              <small>Noch keine aktiven Teilnehmer</small>
            </div>
          <% end %>
        </div>
      </div>

      <!-- Room Info -->
      <div class="card">
        <div class="card-header">
          <h6 class="mb-0">
            <i class="bi bi-info-circle me-2"></i>
            Raum-Informationen
          </h6>
        </div>
        <div class="card-body">
          <div class="row text-center">
            <div class="col-6 border-end">
              <div class="bg-primary bg-opacity-10 rounded p-2 mb-2">
                <i class="bi bi-chat-text text-primary fs-5"></i>
              </div>
              <h6 class="mb-0"><%= @room.messages.count %></h6>
              <small class="text-muted">Nachrichten</small>
            </div>
            <div class="col-6">
              <div class="bg-success bg-opacity-10 rounded p-2 mb-2">
                <i class="bi bi-people text-success fs-5"></i>
              </div>
              <h6 class="mb-0"><%= active_users.count %></h6>
              <small class="text-muted">Teilnehmer</small>
            </div>
          </div>

          <hr>

          <div class="text-center">
            <small class="text-muted">
              <i class="bi bi-calendar3 me-1"></i>
              Erstellt am <%= @room.created_at.strftime("%d.%m.%Y") %>
            </small>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script type="module">
  import { createConsumer } from "@rails/actioncable";

  document.addEventListener('DOMContentLoaded', function() {
    const roomId = <%= @room.id %>;
    let consumer, subscription;

    console.log('üîß Initializing WebSocket for room:', roomId);

    // Initialize WebSocket connection
    function initializeWebSocket() {
      try {
        consumer = createConsumer();

        subscription = consumer.subscriptions.create(
          { channel: "ChatChannel", room_id: roomId },
          {
            connected: function() {
              console.log("‚úÖ Connected to ChatChannel for room " + roomId);
              updateConnectionStatus(true);
            },

            disconnected: function() {
              console.log("‚ùå Disconnected from ChatChannel");
              updateConnectionStatus(false);
            },

            received: function(data) {
              console.log("üì® Received message:", data);
              addMessageToChat(data);
            }
          }
        );
      } catch (error) {
        console.error("‚ùå WebSocket initialization failed:", error);
        updateConnectionStatus(false);
      }
    }

    // Update connection status indicator
    function updateConnectionStatus(connected) {
      const indicator = document.getElementById('connection-status');
      if (indicator) {
        if (connected) {
          indicator.className = 'badge bg-success ms-2';
          indicator.title = 'WebSocket verbunden';
          indicator.textContent = '‚óè';
        } else {
          indicator.className = 'badge bg-warning ms-2';
          indicator.title = 'WebSocket getrennt';
          indicator.textContent = '‚óè';
        }
      }
    }

    // Add new message to chat
    function addMessageToChat(data) {
      const container = document.getElementById('messages-container');
      const noMessages = document.getElementById('no-messages');

      if (noMessages) {
        noMessages.style.display = 'none';
      }

      if (container) {
        container.insertAdjacentHTML('beforeend', data.message);

        // Auto-scroll to bottom
        setTimeout(function() {
          container.scrollTop = container.scrollHeight;
        }, 50);
      }
    }

    // Override form submission to use WebSocket
    const messageForm = document.getElementById('message-form');
    if (messageForm) {
      messageForm.addEventListener('submit', function(e) {
        e.preventDefault();

        const messageInput = document.getElementById('message-input');
        const content = messageInput.value.trim();

        if (!content) {
          alert('Bitte gib eine Nachricht ein.');
          return;
        }

        if (subscription && typeof subscription.perform === 'function') {
          // Send via WebSocket
          console.log('üöÄ Sending via WebSocket:', content);
          subscription.perform('send_message', { content: content });
          messageInput.value = '';
        } else {
          // Fallback: submit form normally
          console.log('‚ö†Ô∏è No WebSocket connection, submitting form normally');
          e.target.submit();
        }
      });
    }

    // Handle Enter key
    const messageInput = document.getElementById('message-input');
    if (messageInput) {
      messageInput.addEventListener('keydown', function(e) {
        if (e.key === 'Enter' && !e.shiftKey) {
          e.preventDefault();
          messageForm.dispatchEvent(new Event('submit'));
        }
      });
    }

    // Auto-scroll to bottom on page load
    const container = document.getElementById('messages-container');
    if (container) {
      container.scrollTop = container.scrollHeight;
    }

    // Initialize WebSocket
    initializeWebSocket();
  });
</script>
