<div class="row">
  <div class="col-md-12">
    <div class="d-flex justify-content-between align-items-center mb-3">
      <h2><%= @room.name %></h2>
      <%= link_to "‚Üê Zur√ºck zu Chatr√§umen", rooms_path, class: "btn btn-outline-secondary" %>
    </div>
    
    <% if @room.description.present? %>
      <div class="alert alert-info">
        <%= @room.description %>
      </div>
    <% end %>
  </div>
</div>

<div class="row">
  <div class="col-md-12">
    <div class="card" style="height: 500px;">
      <div class="card-header">
        <h5 class="mb-0">
          Chat
          <span class="badge bg-success ms-2" id="connection-status">‚óè</span>
        </h5>
      </div>
      
      <div class="card-body overflow-auto" id="messages-container">
        <% if @messages.any? %>
          <% @messages.each do |message| %>
            <%= render 'messages/message', message: message %>
          <% end %>
        <% else %>
          <div class="text-center text-muted" id="no-messages">
            Noch keine Nachrichten in diesem Chatraum.
          </div>
        <% end %>
      </div>
      
      <div class="card-footer">
        <%= form_with model: [@room, @message], 
            local: false, 
            id: "message-form",
            class: "d-flex" do |form| %>
          <div class="flex-grow-1 me-2">
            <%= form.text_area :content, 
                placeholder: "Schreibe eine Nachricht...", 
                class: "form-control", 
                rows: 2,
                id: "message-input",
                required: true %>
          </div>
          <div class="align-self-end">
            <%= form.submit "Senden", class: "btn btn-primary", id: "send-button" %>
          </div>
        <% end %>
        
        <div id="message-errors" class="alert alert-danger mt-2 mb-0" style="display: none;"></div>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const roomId = <%= @room.id %>;
    let consumer, subscription;
    
    // Check if ActionCable is available
    function checkActionCable() {
      if (typeof ActionCable !== 'undefined') {
        console.log('ActionCable is available');
        initializeWebSocket();
        return true;
      } else {
        console.log('ActionCable not available, retrying...');
        return false;
      }
    }
    
    // Initialize ActionCable with retry logic
    function initializeWebSocket() {
      try {
        consumer = ActionCable.createConsumer();
        
        subscription = consumer.subscriptions.create(
          { channel: "ChatChannel", room_id: roomId },
          {
            connected: function() {
              console.log("‚úÖ Connected to ChatChannel for room " + roomId);
              updateConnectionStatus(true);
            },
            
            disconnected: function() {
              console.log("‚ùå Disconnected from ChatChannel");
              updateConnectionStatus(false);
            },
            
            received: function(data) {
              console.log("üì® Received message:", data);
              addMessageToChat(data);
            }
          }
        );
      } catch (error) {
        console.error("‚ùå WebSocket initialization failed:", error);
        updateConnectionStatus(false);
      }
    }
    
    // Update connection status indicator
    function updateConnectionStatus(connected) {
      const indicator = document.getElementById('connection-status');
      if (connected) {
        indicator.className = 'badge bg-success ms-2';
        indicator.title = 'WebSocket verbunden';
        indicator.textContent = '‚óè';
      } else {
        indicator.className = 'badge bg-warning ms-2';
        indicator.title = 'WebSocket getrennt';
        indicator.textContent = '‚óè';
      }
    }
    
    // Add new message to chat
    function addMessageToChat(data) {
      const container = document.getElementById('messages-container');
      const noMessages = document.getElementById('no-messages');
      
      if (noMessages) {
        noMessages.style.display = 'none';
      }
      
      container.insertAdjacentHTML('beforeend', data.message);
      
      // Auto-scroll to bottom
      setTimeout(function() {
        container.scrollTop = container.scrollHeight;
      }, 50);
    }
    
    // Override form submission to use WebSocket
    const messageForm = document.getElementById('message-form');
    if (messageForm) {
      messageForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        const messageInput = document.getElementById('message-input');
        const content = messageInput.value.trim();
        
        if (!content) {
          alert('Bitte gib eine Nachricht ein.');
          return;
        }
        
        if (subscription && typeof subscription.perform === 'function') {
          // Send via WebSocket
          console.log('üöÄ Sending via WebSocket:', content);
          subscription.perform('send_message', { content: content });
          messageInput.value = '';
        } else {
          // Fallback: submit form normally
          console.log('‚ö†Ô∏è No WebSocket connection, submitting form normally');
          e.target.submit();
        }
      });
    }
    
    // Handle Enter key
    const messageInput = document.getElementById('message-input');
    if (messageInput) {
      messageInput.addEventListener('keydown', function(e) {
        if (e.key === 'Enter' && !e.shiftKey) {
          e.preventDefault();
          messageForm.dispatchEvent(new Event('submit'));
        }
      });
    }
    
    // Auto-scroll to bottom on page load
    const container = document.getElementById('messages-container');
    if (container) {
      container.scrollTop = container.scrollHeight;
    }
    
    // Try to initialize WebSocket with retry logic
    let retries = 0;
    const maxRetries = 10;
    
    function tryInitialize() {
      if (checkActionCable()) {
        return; // Success
      }
      
      retries++;
      if (retries < maxRetries) {
        setTimeout(tryInitialize, 200 * retries); // Exponential backoff
      } else {
        console.error('‚ùå Failed to initialize ActionCable after ' + maxRetries + ' attempts');
        updateConnectionStatus(false);
      }
    }
    
    // Start initialization
    tryInitialize();
  });
</script>
